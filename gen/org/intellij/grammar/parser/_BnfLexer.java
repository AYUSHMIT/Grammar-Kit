// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _BnfLexer.flex

package org.intellij.grammar.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.grammar.BnfTokenSets.BNF_BLOCK_COMMENT;
import static org.intellij.grammar.BnfTokenSets.BNF_LINE_COMMENT;
import static org.intellij.grammar.psi.BnfTypes.*;


public class _BnfLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\3\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\0\1\16\1\17\11\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\6\27\24\30"+
    "\1\31\1\32\1\33\1\0\1\15\1\0\6\27\21\30"+
    "\1\34\2\30\1\35\1\36\1\37\7\0\1\3\44\0"+
    "\1\30\12\0\1\30\4\0\1\30\5\0\27\30\1\0"+
    "\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30\7\0"+
    "\1\30\1\0\1\30\201\0\5\30\1\0\2\30\2\0"+
    "\4\30\1\0\1\30\6\0\1\30\1\0\3\30\1\0"+
    "\1\30\1\0\24\30\1\0\123\30\1\0\213\30\10\0"+
    "\246\30\1\0\46\30\2\0\1\30\6\0\51\30\107\0"+
    "\33\30\4\0\4\30\55\0\53\30\25\0\12\20\4\0"+
    "\2\30\1\0\143\30\1\0\1\30\17\0\2\30\7\0"+
    "\2\30\12\20\3\30\2\0\1\30\20\0\1\30\1\0"+
    "\36\30\35\0\131\30\13\0\1\30\16\0\12\20\41\30"+
    "\11\0\2\30\4\0\1\30\5\0\26\30\4\0\1\30"+
    "\11\0\1\30\3\0\1\30\27\0\31\30\7\0\13\30"+
    "\65\0\25\30\1\0\10\30\106\0\66\30\3\0\1\30"+
    "\22\0\1\30\7\0\12\30\4\0\12\20\1\0\20\30"+
    "\4\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\1\30\3\0\4\30\3\0\1\30\20\0\1\30"+
    "\15\0\2\30\1\0\3\30\4\0\12\20\2\30\12\0"+
    "\1\30\10\0\6\30\4\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\2\30\1\0\2\30\37\0"+
    "\4\30\1\0\1\30\7\0\12\20\2\0\3\30\20\0"+
    "\11\30\1\0\3\30\1\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\5\30\3\0\1\30\22\0\1\30\17\0"+
    "\2\30\4\0\12\20\11\0\1\30\13\0\10\30\2\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0"+
    "\5\30\3\0\1\30\36\0\2\30\1\0\3\30\4\0"+
    "\12\20\1\0\1\30\21\0\1\30\1\0\6\30\3\0"+
    "\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0"+
    "\2\30\3\0\2\30\3\0\3\30\3\0\14\30\26\0"+
    "\1\30\25\0\12\20\25\0\10\30\1\0\3\30\1\0"+
    "\27\30\1\0\20\30\3\0\1\30\32\0\3\30\5\0"+
    "\2\30\4\0\12\20\20\0\1\30\4\0\10\30\1\0"+
    "\3\30\1\0\27\30\1\0\12\30\1\0\5\30\3\0"+
    "\1\30\40\0\1\30\1\0\2\30\4\0\12\20\1\0"+
    "\2\30\22\0\10\30\1\0\3\30\1\0\51\30\2\0"+
    "\1\30\20\0\1\30\5\0\3\30\10\0\3\30\4\0"+
    "\12\20\12\0\6\30\5\0\22\30\3\0\30\30\1\0"+
    "\11\30\1\0\1\30\2\0\7\30\37\0\12\20\21\0"+
    "\60\30\1\0\2\30\14\0\7\30\11\0\12\20\47\0"+
    "\2\30\1\0\1\30\1\0\5\30\1\0\30\30\1\0"+
    "\1\30\1\0\12\30\1\0\2\30\11\0\1\30\2\0"+
    "\5\30\1\0\1\30\11\0\12\20\2\0\4\30\40\0"+
    "\1\30\37\0\12\20\26\0\10\30\1\0\44\30\33\0"+
    "\5\30\163\0\53\30\24\0\1\30\12\20\6\0\6\30"+
    "\4\0\4\30\3\0\1\30\3\0\2\30\7\0\3\30"+
    "\4\0\15\30\14\0\1\30\1\0\12\20\6\0\46\30"+
    "\1\0\1\30\5\0\1\30\2\0\53\30\1\0\115\30"+
    "\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30"+
    "\2\0\51\30\1\0\4\30\2\0\41\30\1\0\4\30"+
    "\2\0\7\30\1\0\1\30\1\0\4\30\2\0\17\30"+
    "\1\0\71\30\1\0\4\30\2\0\103\30\45\0\20\30"+
    "\20\0\126\30\2\0\6\30\3\0\u016c\30\2\0\21\30"+
    "\1\0\32\30\5\0\113\30\6\0\10\30\7\0\15\30"+
    "\1\0\4\30\16\0\22\30\16\0\22\30\16\0\15\30"+
    "\1\0\3\30\17\0\64\30\43\0\1\30\4\0\1\30"+
    "\3\0\12\20\46\0\12\20\6\0\131\30\7\0\5\30"+
    "\2\0\42\30\1\0\1\30\5\0\106\30\12\0\37\30"+
    "\47\0\12\20\36\30\2\0\5\30\13\0\54\30\4\0"+
    "\32\30\6\0\12\20\46\0\27\30\11\0\65\30\53\0"+
    "\12\20\6\0\12\20\15\0\1\30\135\0\57\30\21\0"+
    "\7\30\4\0\12\20\51\0\36\30\15\0\2\30\12\20"+
    "\54\30\32\0\44\30\34\0\12\20\3\0\3\30\12\20"+
    "\44\30\2\0\11\30\7\0\53\30\2\0\3\30\51\0"+
    "\4\30\1\0\6\30\1\0\2\30\3\0\1\30\5\0"+
    "\300\30\100\0\26\30\2\0\6\30\2\0\46\30\2\0"+
    "\6\30\2\0\10\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\37\30\2\0\65\30\1\0\7\30\1\0"+
    "\1\30\3\0\3\30\1\0\7\30\3\0\4\30\2\0"+
    "\6\30\4\0\15\30\5\0\3\30\1\0\7\30\53\0"+
    "\2\3\107\0\1\30\15\0\1\30\20\0\15\30\145\0"+
    "\1\30\4\0\1\30\2\0\12\30\1\0\1\30\3\0"+
    "\5\30\6\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\4\30\1\0\13\30\2\0\4\30\5\0\5\30\4\0"+
    "\1\30\64\0\2\30\u017b\0\57\30\1\0\57\30\1\0"+
    "\205\30\6\0\4\30\3\0\2\30\14\0\46\30\1\0"+
    "\1\30\5\0\1\30\2\0\70\30\7\0\1\30\20\0"+
    "\27\30\11\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\120\0\1\30\325\0\2\30\52\0\5\30\5\0"+
    "\2\30\4\0\126\30\6\0\3\30\1\0\132\30\1\0"+
    "\4\30\5\0\53\30\1\0\136\30\21\0\33\30\65\0"+
    "\306\30\112\0\360\30\20\0\215\30\103\0\56\30\2\0"+
    "\15\30\3\0\20\30\12\20\2\30\24\0\57\30\20\0"+
    "\37\30\2\0\106\30\61\0\11\30\2\0\147\30\2\0"+
    "\65\30\2\0\5\30\60\0\13\30\1\0\3\30\1\0"+
    "\4\30\1\0\27\30\35\0\64\30\16\0\62\30\34\0"+
    "\12\20\30\0\6\30\3\0\1\30\1\0\2\30\1\0"+
    "\12\20\34\30\12\0\27\30\31\0\35\30\7\0\57\30"+
    "\34\0\1\30\12\20\6\0\5\30\1\0\12\30\12\20"+
    "\5\30\1\0\51\30\27\0\3\30\1\0\10\30\4\0"+
    "\12\20\6\0\27\30\3\0\1\30\3\0\62\30\1\0"+
    "\1\30\3\0\2\30\2\0\5\30\2\0\1\30\1\0"+
    "\1\30\30\0\3\30\2\0\13\30\7\0\3\30\14\0"+
    "\6\30\2\0\6\30\2\0\6\30\11\0\7\30\1\0"+
    "\7\30\1\0\53\30\1\0\14\30\10\0\163\30\15\0"+
    "\12\20\6\0\244\30\14\0\27\30\4\0\61\30\4\0"+
    "\u0100\3\156\30\2\0\152\30\46\0\7\30\14\0\5\30"+
    "\5\0\1\30\1\0\12\30\1\0\15\30\1\0\5\30"+
    "\1\0\1\30\1\0\2\30\1\0\2\30\1\0\154\30"+
    "\41\0\153\30\22\0\100\30\2\0\66\30\50\0\14\30"+
    "\164\0\5\30\1\0\207\30\23\0\12\20\7\0\32\30"+
    "\6\0\32\30\13\0\131\30\3\0\6\30\2\0\6\30"+
    "\2\0\6\30\2\0\3\30\43\0\14\30\1\0\32\30"+
    "\1\0\23\30\1\0\2\30\1\0\17\30\2\0\16\30"+
    "\42\0\173\30\205\0\35\30\3\0\61\30\57\0\40\30"+
    "\15\0\24\30\1\0\10\30\6\0\46\30\12\0\36\30"+
    "\2\0\44\30\4\0\10\30\60\0\236\30\2\0\12\20"+
    "\6\0\44\30\4\0\44\30\4\0\50\30\10\0\64\30"+
    "\234\0\67\30\11\0\26\30\12\0\10\30\230\0\6\30"+
    "\2\0\1\30\1\0\54\30\1\0\2\30\3\0\1\30"+
    "\2\0\27\30\12\0\27\30\11\0\37\30\101\0\23\30"+
    "\1\0\2\30\12\0\26\30\12\0\32\30\106\0\70\30"+
    "\6\0\2\30\100\0\1\30\17\0\4\30\1\0\3\30"+
    "\1\0\35\30\52\0\35\30\3\0\35\30\43\0\10\30"+
    "\1\0\34\30\33\0\66\30\12\0\26\30\12\0\23\30"+
    "\15\0\22\30\156\0\111\30\67\0\63\30\15\0\63\30"+
    "\15\0\44\30\14\0\12\20\306\0\35\30\12\0\1\30"+
    "\10\0\26\30\232\0\27\30\14\0\65\30\56\0\12\20"+
    "\23\0\55\30\40\0\31\30\7\0\12\20\11\0\44\30"+
    "\17\0\12\20\4\0\1\30\13\0\43\30\3\0\1\30"+
    "\14\0\60\30\16\0\4\30\13\0\12\20\1\30\1\0"+
    "\1\30\43\0\22\30\1\0\31\30\124\0\7\30\1\0"+
    "\1\30\1\0\4\30\1\0\17\30\1\0\12\30\7\0"+
    "\57\30\21\0\12\20\13\0\10\30\2\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\3\0"+
    "\1\30\22\0\1\30\14\0\5\30\236\0\65\30\22\0"+
    "\4\30\5\0\12\20\5\0\1\30\40\0\60\30\24\0"+
    "\2\30\1\0\1\30\10\0\12\20\246\0\57\30\51\0"+
    "\4\30\44\0\60\30\24\0\1\30\13\0\12\20\46\0"+
    "\53\30\15\0\1\30\7\0\12\20\66\0\33\30\25\0"+
    "\12\20\306\0\54\30\164\0\100\30\12\20\25\0\1\30"+
    "\240\0\10\30\2\0\47\30\20\0\1\30\1\0\1\30"+
    "\34\0\1\30\12\0\50\30\7\0\1\30\25\0\1\30"+
    "\13\0\56\30\23\0\1\30\42\0\71\30\7\0\11\30"+
    "\1\0\45\30\21\0\1\30\17\0\12\20\30\0\36\30"+
    "\160\0\7\30\1\0\2\30\1\0\46\30\25\0\1\30"+
    "\11\0\12\20\6\0\6\30\1\0\2\30\1\0\40\30"+
    "\16\0\1\30\7\0\12\20\u0136\0\23\30\15\0\232\30"+
    "\346\0\304\30\274\0\57\30\321\0\107\30\271\0\71\30"+
    "\7\0\37\30\1\0\12\20\146\0\36\30\22\0\60\30"+
    "\20\0\4\30\14\0\12\20\11\0\25\30\5\0\23\30"+
    "\260\0\100\30\200\0\113\30\5\0\1\30\102\0\15\30"+
    "\100\0\2\30\1\0\1\30\34\0\370\30\10\0\363\30"+
    "\15\0\37\30\61\0\3\30\21\0\4\30\10\0\u018c\30"+
    "\4\0\153\30\5\0\15\30\3\0\11\30\7\0\12\30"+
    "\146\0\125\30\1\0\107\30\1\0\2\30\2\0\1\30"+
    "\2\0\2\30\2\0\4\30\1\0\14\30\1\0\1\30"+
    "\1\0\7\30\1\0\101\30\1\0\4\30\2\0\10\30"+
    "\1\0\7\30\1\0\34\30\1\0\4\30\1\0\5\30"+
    "\1\0\1\30\3\0\7\30\1\0\u0154\30\2\0\31\30"+
    "\1\0\31\30\1\0\37\30\1\0\31\30\1\0\37\30"+
    "\1\0\31\30\1\0\37\30\1\0\31\30\1\0\37\30"+
    "\1\0\31\30\1\0\10\30\2\0\62\20\55\30\12\0"+
    "\7\30\2\0\12\20\4\0\1\30\u0171\0\54\30\4\0"+
    "\12\20\6\0\305\30\73\0\104\30\7\0\1\30\4\0"+
    "\12\20\246\0\4\30\1\0\33\30\1\0\2\30\1\0"+
    "\1\30\2\0\1\30\1\0\12\30\1\0\4\30\1\0"+
    "\1\30\1\0\1\30\6\0\1\30\4\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\3\30\1\0\2\30\1\0"+
    "\1\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\1\30\1\0\2\30\1\0\1\30\2\0"+
    "\4\30\1\0\7\30\1\0\4\30\1\0\4\30\1\0"+
    "\1\30\1\0\12\30\1\0\21\30\5\0\3\30\1\0"+
    "\5\30\1\0\21\30\104\0\327\30\51\0\65\30\13\0"+
    "\336\30\2\0\u0182\30\16\0\u0131\30\37\0\36\30\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\1\2\11\1\1\1\12\1\1"+
    "\1\13\1\1\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\0\1\24\1\25\3\0\1\26\1\27"+
    "\1\24\1\11\1\30\1\15\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\40\0\140\0\40\0\200\0\40"+
    "\0\40\0\40\0\40\0\240\0\300\0\340\0\u0100\0\40"+
    "\0\u0120\0\40\0\u0140\0\40\0\u0160\0\40\0\40\0\40"+
    "\0\40\0\40\0\40\0\u0180\0\u01a0\0\u01c0\0\u01e0\0\u0200"+
    "\0\u0220\0\40\0\40\0\u0240\0\u01e0\0\40\0\40\0\40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\25\1\26"+
    "\1\2\1\27\1\25\1\30\1\31\1\32\41\0\2\3"+
    "\1\0\1\3\33\0\2\5\1\0\3\5\1\33\23\5"+
    "\1\34\5\5\2\7\1\0\5\7\1\33\27\7\13\0"+
    "\1\35\2\0\1\36\40\0\2\16\13\0\1\37\22\0"+
    "\2\16\40\0\1\40\16\0\23\41\1\42\1\41\1\0"+
    "\12\41\25\0\1\43\27\0\1\25\1\0\2\25\6\0"+
    "\2\25\3\0\1\25\3\0\40\5\13\35\1\44\24\35"+
    "\2\36\3\0\33\36\17\0\2\45\6\0\1\45\34\0"+
    "\1\46\13\0\23\41\1\0\1\41\1\47\12\41\13\35"+
    "\1\44\2\35\1\50\21\35";

  private static int [] zzUnpacktrans() {
    int [] result = new int[608];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\4\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\1\1\6\11"+
    "\1\0\2\1\3\0\2\11\2\1\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public _BnfLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BnfLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          // fall through
          case 25: break;
          case 2:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 26: break;
          case 3:
            { yybegin(YYINITIAL); return BNF_OP_NOT;
            }
          // fall through
          case 27: break;
          case 4:
            { yybegin(YYINITIAL); return BNF_OP_AND;
            }
          // fall through
          case 28: break;
          case 5:
            { yybegin(YYINITIAL); return BNF_LEFT_PAREN;
            }
          // fall through
          case 29: break;
          case 6:
            { yybegin(YYINITIAL); return BNF_RIGHT_PAREN;
            }
          // fall through
          case 30: break;
          case 7:
            { yybegin(YYINITIAL); return BNF_OP_ZEROMORE;
            }
          // fall through
          case 31: break;
          case 8:
            { yybegin(YYINITIAL); return BNF_OP_ONEMORE;
            }
          // fall through
          case 32: break;
          case 9:
            { yybegin(YYINITIAL); return BNF_NUMBER;
            }
          // fall through
          case 33: break;
          case 10:
            { yybegin(YYINITIAL); return BNF_SEMICOLON;
            }
          // fall through
          case 34: break;
          case 11:
            { yybegin(YYINITIAL); return BNF_OP_EQ;
            }
          // fall through
          case 35: break;
          case 12:
            { yybegin(YYINITIAL); return BNF_OP_OPT;
            }
          // fall through
          case 36: break;
          case 13:
            { yybegin(YYINITIAL); return BNF_ID;
            }
          // fall through
          case 37: break;
          case 14:
            { yybegin(YYINITIAL); return BNF_LEFT_BRACKET;
            }
          // fall through
          case 38: break;
          case 15:
            { yybegin(YYINITIAL); return BNF_RIGHT_BRACKET;
            }
          // fall through
          case 39: break;
          case 16:
            { yybegin(YYINITIAL); return BNF_LEFT_BRACE;
            }
          // fall through
          case 40: break;
          case 17:
            { yybegin(YYINITIAL); return BNF_OP_OR;
            }
          // fall through
          case 41: break;
          case 18:
            { yybegin(YYINITIAL); return BNF_RIGHT_BRACE;
            }
          // fall through
          case 42: break;
          case 19:
            { yybegin(YYINITIAL); return BNF_STRING;
            }
          // fall through
          case 43: break;
          case 20:
            { yybegin(YYINITIAL); return BNF_BLOCK_COMMENT;
            }
          // fall through
          case 44: break;
          case 21:
            { yybegin(YYINITIAL); return BNF_LINE_COMMENT;
            }
          // fall through
          case 45: break;
          case 22:
            { yybegin(YYINITIAL); return BNF_EXTERNAL_START;
            }
          // fall through
          case 46: break;
          case 23:
            { yybegin(YYINITIAL); return BNF_EXTERNAL_END;
            }
          // fall through
          case 47: break;
          case 24:
            { yybegin(YYINITIAL); return BNF_OP_IS;
            }
          // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
